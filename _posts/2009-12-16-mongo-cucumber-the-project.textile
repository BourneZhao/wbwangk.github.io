---
layout: default
title: Mongo - Textile - The Idea
---

h1. {{ page.title }}

p. 16 Dec 2009 - Kyoto, Japan

When I found "MongoDB":http://www.mongodb.org/ this week I immediately fell in love.  It somehow addresses all the issues I've tended to have with traditional RDBMs (which I won't get into here), and gives a very powerful (and fast!) way of storing data.  I admit I didn't fully realize what document databases were until this week, and now I am completely sold on using them where applicable.  There's several Ruby "ORM"'s for MongoDB, and I tried all of them over the last two days trying to weight their pros, cons, and depth of development.  My final decision has fallen on "Mongo Mapper":http://github.com/jnunemaker/mongomapper though, if only because I really like how cleanly it dropped into place.  I spent the entire day today converting _The Idea_ from the last ORM I tried over to Mongo Mapper, however, the majority of the work actually ended up with me figuring out how to get Cucumber to bootstrap correctly.

It all starts with the _config/environment.rb_:

{% highlight ruby linenos %}
require 'mongo_mapper'

Rails::Initializer.run do |config|
  config.frameworks -= [ :active_record ]
  MongoMapper.database = config.database_configuration[RAILS_ENV]['database']
end
{% endhighlight %}

Obviously the only major change here is to drop ActiveRecord off the map, and my own personal favorite is to read the _config/database.yml_ file to get the database name to connect to.  Not sure if there is a better way to do this, but after rooting around through the rails code this is what I figured out.

The next part was the biggest headache though, and I'm still not entirely happy with the solution.  For whatever reason RAILS_ENV kept getting lost while running my rake commands (I was trying to force it with _ENV["RAILS_ENV"] ||= "whatever")_, so I ended up using a relatively hacky _system()_ call while passing in the RAILS_ENV.  Note that I also had to remove the _'db:test:prepare'_ statements out of the original _lib/tasks/cucumber.rake_ file as well.

Here is _lib/tasks/game.rake_:

{% highlight ruby linenos %}
namespace :game do
  
  desc 'Run the cucumber BDD test suite'
  task :cucumber do
    Rake::Task['game:prep:cucumber'].invoke
    system("rake cucumber RAILS_ENV=cucumber")
    Rake::Task['game:destroy:cucumber'].invoke
  end
  
  namespace :db do
    desc 'Seed the current RAILS_ENV database from db/seeds.rb'
    task :seed do
      require 'db/seeds'
    end
  
    desc 'Delete the collections in the current RAILS_ENV database'
    task :delete do
      MongoMapper.database.collections.each do |collection|
        collection.drop
      end
    end
  end
  
  namespace :prep do
    desc 'Setup the DEVELOPMENT system'
    task :dev do
      system("rake game:prep:setup RAILS_ENV=development")
    end
    desc 'Setup the TEST system'
    task :test do
      system("rake game:prep:setup RAILS_ENV=test")
    end
    desc 'Setup the CUCUMBER system'
    task :cucumber do
      system("rake game:prep:setup RAILS_ENV=cucumber")
    end
    desc 'Setup the RAILS_ENV system'
    task :setup do
      require File.expand_path(File.dirname(__FILE__) + '/../../config/environment')
      Rake::Task['game:db:delete'].invoke
      Rake::Task['game:db:seed'].invoke
    end
  end
  
  namespace :destroy do
    desc 'Tear down the DEVELOPMENT system'
    task :dev do
      system("rake game:destroy:tear_down RAILS_ENV=development")
    end
    desc 'Tear down the TEST system'
    task :test do
      system("rake game:destroy:tear_down RAILS_ENV=test")
    end
    desc 'Tear down the CUCUMBER system'
    task :cucumber do
      system("rake game:destroy:tear_down RAILS_ENV=cucumber")
    end
    desc 'Tear down the RAILS_ENV system'
    task :tear_down do
      require File.expand_path(File.dirname(__FILE__) + '/../../config/environment')
      Rake::Task['game:db:delete'].invoke
    end
  end
  
end

desc 'Run game:prep:dev by default'
task :game => 'game:prep:dev'

task :default => :game
{% endhighlight %}

A handful of things I am doing here aren't optimal.  For example, it would be better to just delete all the records in each MongoDB collection rather than completely delete the collections themselves.  The current method leads to relatively slow tests, since it has to rebuild the collections on the filesystem itself every time.

For the time being though, this works very well.  I'm excited to continue to use this in _The Idea_, and am really excited to see if I am able to fully utilize the speed capabilities under heavy utilization.